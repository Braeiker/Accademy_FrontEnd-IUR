@page "/"
@using IUR.Service
@using System.Net.Http.Json
@using IUR_Backend.Models.Dto.StudentDto
@inject HttpClient Http
@inject IJSRuntime JsRuntime
@inject NavigationManager Navigation
@inject UserDTO User

<form class="form">
    <span class="input-span">
        <label for="id" class="label">Username</label>
        <input type="text" id="id" @bind="Username" />
    </span>
    <span class="input-span">
        <label for="password" class="label">Password</label>
        <input type="password" id="password" @bind="Password" />
    </span>
    <span class="span"><a href="#">Forgot password?</a></span>
    <button type="button" class="submit" @onclick="LoginLogic">
        Login
    </button>
    <span class="span">
        Don't have an account?
        <NavLink class="nav-link" href="/Register" Match="NavLinkMatch.All">Sign up</NavLink>
    </span>
</form>

@code {
    private string Username { get; set; } = string.Empty;
    private string Password { get; set; } = string.Empty;
    private string ErrorMessage { get; set; }

    private async Task LoginLogic()
    {
        if (string.IsNullOrEmpty(Username) || string.IsNullOrEmpty(Password))
        {
            await JsRuntime.InvokeVoidAsync("alert", "Please enter both Student ID and Password.");
            return;
        }

        var loginDto = new StudentDto { UserName = Username, Password = Password };
        var response = await Http.PostAsJsonAsync("api/login", loginDto);

        if (response.IsSuccessStatusCode)
        {
            var result = await response.Content.ReadFromJsonAsync<dynamic>();
            var token = (string)result?.Token;

            if (!string.IsNullOrEmpty(token))
            {
                await JsRuntime.InvokeVoidAsync("localStorage.setItem", "authToken", token);
                Navigation.NavigateTo("/Home"); 
            }
        }
        else
        {
            var error = await response.Content.ReadFromJsonAsync<dynamic>();
            ErrorMessage = (string)error?.Message;
            await JsRuntime.InvokeVoidAsync("alert", ErrorMessage);
        }
    }
}

<style>
    body {
        background-color: #f0f2f5;
        color: #333;
        margin: 0;
        padding: 0;
    }

    .form {
        margin: auto;
        margin-top: 15vh;
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 1rem;
        width: 100%;
        max-width: 300px;
        padding: 2rem;
        background-color: #ffffff;
        border-radius: 10px;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
        align-content: center;
    }

    .input-span {
        width: 100%;
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
    }

    .form input[type="text"],
    .form input[type="password"] {
        border-radius: 0.5rem;
        padding: 1rem 0.75rem;
        width: 100%;
        border: 1px solid #ccc;
        background-color: #f9f9f9;
        outline: none;
        transition: border-color 0.3s ease;
    }

        .form input[type="text"]:focus,
        .form input[type="password"]:focus {
            border-color: #192441;
        }

    .label {
        color: #333;
    }

    .submit {
        padding: 1rem 0.75rem;
        width: 100%;
        border-radius: 3rem;
        background-color: #192441;
        color: #fff;
        border: none;
        cursor: pointer;
        transition: background-color 0.3s ease, box-shadow 0.3s ease;
        font-weight: 600;
        font-size: 0.9rem;
    }

        .submit:hover {
            background-color: #1d2a38;
        }

    .span {
        text-align: center;
        color: #707070;
        font-size: 0.9rem;
    }

        .span a {
            color: #007bff;
            text-decoration: none;
        }

            .span a:hover {
                text-decoration: underline;
            }

    a.nav-link {
        text-decoration: none;
        font-weight: 600;
    }
</style>
